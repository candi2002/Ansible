---
- name: Deploy Flask Web Server and Quiz App
  hosts: controller
  become: yes
  tasks:
    - name: Ensure Python3 and venv are installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-venv
        - python3-pip

    - name: Create Flask app directory
      file:
        path: /opt/flask_app
        state: directory
        owner: candi
        group: candi
        mode: '0755'

    - name: Create virtual environment
      command: python3 -m venv /opt/flask_app/venv
      args:
        creates: /opt/flask_app/venv

    - name: Install Flask in virtual environment
      command: /opt/flask_app/venv/bin/pip install Flask

    - name: Create the initial Flask app file
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask
          app = Flask(__name__)

          @app.route('/')
          def home():
              return "Anh đang thử cái web, em coi có lên khum?!"

          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=5000)

    - name: Create systemd service for Flask app
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Flask App
          After=network.target

          [Service]
          User=candi
          WorkingDirectory=/opt/flask_app
          ExecStart=/opt/flask_app/venv/bin/python /opt/flask_app/app.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply changes
      command: systemctl daemon-reload

    - name: Enable and start Flask app service
      systemd:
        name: flask_app
        state: started
        enabled: yes

    - name: Open port 5000 on the firewall
      ufw:
        rule: allow
        port: 5000
        proto: tcp
        comment: "Allow Flask web server traffic on port 5000"

    - name: Check Flask app service status
      shell: systemctl status flask_app
      register: service_status
      ignore_errors: yes

    - name: Debug service status
      debug:
        msg: "{{ service_status.stdout }}"

    - name: Install SQLite3
      apt:
        name: sqlite3
        state: present

    - name: Update the Flask app file with new content
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask, render_template
          from flask_sqlalchemy import SQLAlchemy

          app = Flask(__name__)
          app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///quiz.db'
          db = SQLAlchemy(app)

          class Host(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              name = db.Column(db.String(100), nullable=False)
              os_version = db.Column(db.String(100), nullable=False)

          @app.route('/')
          def home():
              hosts = Host.query.all()
              return render_template('home.html', hosts=hosts)

          @app.route('/host/<int:id>')
          def host(id):
              host = Host.query.get_or_404(id)
              return render_template('host.html', host=host)

          if __name__ == "__main__":
              db.create_all()
              app.run(host='0.0.0.0', port=5000)

    - name: Copy the Flask app templates
      copy:
        dest: /opt/flask_app/templates/home.html
        content: |
          {% raw %}
          <!doctype html>
          <html>
          <head>
              <title>Host Information</title>
          </head>
          <body>
              <h1>Host Information</h1>
              <ul>
              {% for host in hosts %}
                  <li><a href="/host/{{ host.id }}">{{ host.name }}</a></li>
              {% endfor %}
              </ul>
          </body>
          </html>
          {% endraw %}
        mode: 0644
        owner: root
        group: www-data

    - name: Copy the host detail template
      copy:
        dest: /opt/flask_app/templates/host.html
        content: |
          {% raw %}
          <!doctype html>
          <html>
          <head>
              <title>Host Details</title>
          </head>
          <body>
              <h1>Host: {{ host.name }}</h1>
              <h2>OS Version</h2>
              <p>{{ host.os_version }}</p>
          </body>
          </html>
          {% endraw %}
        mode: 0644
        owner: root
        group: www-data

    - name: Ensure SQLite database exists
      command: sqlite3 /opt/flask_app/quiz.db "CREATE TABLE IF NOT EXISTS host (id INTEGER PRIMARY KEY, name TEXT, os_version TEXT);"

    - name: Gather OS version
      command: uname -a
      register: os_version
      delegate_to: "{{ item }}"
      loop: "{{ groups['all'] }}"

    - name: Prepare SQL for each host
      set_fact:
        host_sql: |
          INSERT INTO host (name, os_version)
          VALUES (
            '{{ item }}',
            '{{ (os_version.results | selectattr("item", "equalto", item) | first).stdout | regex_replace("'", "''") | regex_replace("\n", " ") }}'
          );
      loop: "{{ groups['all'] }}"

    - name: Update database with host information
      command: "echo '{{ host_sql }}' | sqlite3 /opt/flask_app/quiz.db"
      loop: "{{ groups['all'] }}"
      loop_control:
        loop_var: item

    - name: Ensure the Flask app service file is updated
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Gunicorn instance to serve flask_app
          After=network.target

          [Service]
          User=root
          Group=www-data
          WorkingDirectory=/opt/flask_app
          Environment="PATH=/opt/flask_app/venv/bin"
          ExecStart=/opt/flask_app/venv/bin/gunicorn --workers 3 --bind unix:flask_app.sock -m 007 wsgi:app

          [Install]
          WantedBy=multi-user.target
      notify: Restart Flask app service

  handlers:
    - name: Restart Flask app service
      systemd:
        name: flask_app
        state: restarted
        enabled: yes
