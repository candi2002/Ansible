---
- name: Deploy Quiz Web App
  hosts: controller
  become: yes
  tasks:
    - name: Install SQLite3
      apt:
        name: sqlite3
        state: present

    - name: Update the Flask app file with new content
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask, render_template
          from flask_sqlalchemy import SQLAlchemy
          import os

          app = Flask(__name__)
          app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///quiz.db'
          db = SQLAlchemy(app)

          class Host(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              name = db.Column(db.String(100), nullable=False)
              os_version = db.Column(db.String(100), nullable=False)
              syslogs = db.Column(db.Text, nullable=False)
              packages = db.Column(db.Text, nullable=False)

          @app.route('/')
          def home():
              hosts = Host.query.all()
              return render_template('home.html', hosts=hosts)

          @app.route('/host/<int:id>')
          def host(id):
              host = Host.query.get_or_404(id)
              return render_template('host.html', host=host)

          if __name__ == "__main__":
              db.create_all()
              app.run(host='0.0.0.0', port=5000)

    - name: Ensure the Flask app service file is updated
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Gunicorn instance to serve flask_app
          After=network.target

          [Service]
          User=root
          Group=www-data
          WorkingDirectory=/opt/flask_app
          Environment="PATH=/opt/flask_app/venv/bin"
          ExecStart=/opt/flask_app/venv/bin/gunicorn --workers 3 --bind unix:flask_app.sock -m 007 wsgi:app

          [Install]
          WantedBy=multi-user.target
      notify: Restart Flask app service

    - name: Ensure the Flask app working directory exists
      file:
        path: /opt/flask_app
        state: directory
        owner: root
        group: www-data

    - name: Copy the Flask app templates
      copy:
        dest: /opt/flask_app/templates/home.html
        content: |
          {% raw %}
          <!doctype html>
          <html>
          <head>
              <title>Host Information</title>
          </head>
          <body>
              <h1>Host Information</h1>
              <ul>
              {% for host in hosts %}
                  <li><a href="/host/{{ host.id }}">{{ host.name }}</a></li>
              {% endfor %}
              </ul>
          </body>
          </html>
          {% endraw %}
        mode: 0644
        owner: root
        group: www-data

    - name: Copy the host detail template
      copy:
        dest: /opt/flask_app/templates/host.html
        content: |
          {% raw %}
          <!doctype html>
          <html>
          <head>
              <title>Host Details</title>
          </head>
          <body>
              <h1>Host: {{ host.name }}</h1>
              <h2>OS Version</h2>
              <p>{{ host.os_version }}</p>
              <h2>Syslogs</h2>
              <pre>{{ host.syslogs }}</pre>
              <h2>Installed Packages</h2>
              <pre>{{ host.packages }}</pre>
          </body>
          </html>
          {% endraw %}
        mode: 0644
        owner: root
        group: www-data

    - name: Gather OS version
      command: uname -a
      register: os_version
      delegate_to: "{{ item }}"
      with_items: "{{ groups['all'] }}"
    
    - name: Gather syslogs related to errors
      shell: grep -i error /var/log/syslog || true
      register: syslogs
      delegate_to: "{{ item }}"
      with_items: "{{ groups['all'] }}"

    - name: Gather installed packages
      shell: dpkg --list
      register: packages
      delegate_to: "{{ item }}"
      with_items: "{{ groups['all'] }}"

    - name: Update database with host information
      block:
        - name: Ensure SQLite database exists
          command: sqlite3 /opt/flask_app/quiz.db "CREATE TABLE IF NOT EXISTS host (id INTEGER PRIMARY KEY, name TEXT, os_version TEXT, syslogs TEXT, packages TEXT);"

        - name: Insert host information into the database
          command: >
            sqlite3 /opt/flask_app/quiz.db
            "INSERT INTO host (name, os_version, syslogs, packages)
             VALUES ('{{ item.item }}', '{{ item.os_version.stdout }}', '{{ item.syslogs.stdout }}', '{{ item.packages.stdout }}');"
          with_items:
            - os_version: "{{ os_version.results }}"
              syslogs: "{{ syslogs.results }}"
              packages: "{{ packages.results }}"
              item: "{{ item }}"
          loop_control:
            label: "{{ item.item }}"

  handlers:
    - name: Restart Flask app service
      systemd:
        name: flask_app
        state: restarted
        enabled: yes
