---
- name: Create and serve a timetable HTML file with event addition feature
  hosts: controller
  become: yes
  vars: 
    ansible_user: candi
  tasks:
    - name: Ensure Python and required packages are installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-venv
        - python3-pip
        - sqlite3

    - name: Create Flask app directory
      file:
        path: /opt/flask_app
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create virtual environment
      command: python3 -m venv /opt/flask_app/venv
      args:
        creates: /opt/flask_app/venv

    - name: Install Flask and required libraries in virtual environment
      command: /opt/flask_app/venv/bin/pip install Flask flask_sqlalchemy gunicorn
      args:
        creates: /opt/flask_app/venv/bin/pip

    - name: Create the Flask app file
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask, render_template_string, request, jsonify
          from flask_sqlalchemy import SQLAlchemy

          app = Flask(__name__)
          app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///timetable.db'
          db = SQLAlchemy(app)

          class Event(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              hour = db.Column(db.String(10), nullable=False)
              day = db.Column(db.String(10), nullable=False)
              description = db.Column(db.String(200), nullable=True)

          @app.route('/')
          def home():
              template = '''
              <!doctype html>
              <html>
              <head>
                  <title>Timetable</title>
                  <style>
                      table {
                          width: 100%;
                          border-collapse: collapse;
                      }
                      table, th, td {
                          border: 1px solid black;
                      }
                      th, td {
                          padding: 10px;
                          text-align: center;
                      }
                      th {
                          background-color: #f2f2f2;
                      }
                      .editable {
                          cursor: pointer;
                      }
                  </style>
              </head>
              <body>
                  <h1>Timetable</h1>
                  <table>
                      <tr>
                          <th>Hour/Day</th>
                          <th>Monday</th>
                          <th>Tuesday</th>
                          <th>Wednesday</th>
                          <th>Thursday</th>
                          <th>Friday</th>
                          <th>Saturday</th>
                          <th>Sunday</th>
                      </tr>
                      {% for hour in range(0, 24) %}
                      <tr>
                          <td>{{ '%02d:00' % hour }}</td>
                          {% for day in range(0, 7) %}
                          <td class="editable" onclick="makeEditable(this)"></td>
                          {% endfor %}
                      </tr>
                      {% endfor %}
                  </table>
                  <button onclick="saveData()">Save Changes</button>
                  <script>
                      function makeEditable(cell) {
                          cell.contentEditable = true;
                          cell.focus();
                      }

                      function saveData() {
                          const table = document.querySelector('table');
                          const rows = table.querySelectorAll('tr');
                          const data = {};

                          rows.forEach((row, rowIndex) => {
                              const cells = row.querySelectorAll('td');
                              cells.forEach((cell, cellIndex) => {
                                  if (cell.contentEditable === "true") {
                                      const hour = rowIndex;
                                      const day = cellIndex;
                                      const value = cell.innerText;
                                      data[`entry_${hour}_${day}`] = value;
                                  }
                              });
                          });

                          fetch('/submit_event', {
                              method: 'POST',
                              headers: {
                                  'Content-Type': 'application/json'
                              },
                              body: JSON.stringify(data)
                          }).then(response => response.json())
                            .then(result => alert(result.message));
                      }
                  </script>
              </body>
              </html>
              '''
              return render_template_string(template)

          @app.route('/submit_event', methods=['POST'])
          def submit_event():
              if request.is_json:
                  data = request.get_json()
                  for key, value in data.items():
                      hour, day = key.split('_')[1:3]
                      day_name = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][int(day)]
                      new_event = Event(hour=f'{hour}:00', day=day_name, description=value)
                      db.session.add(new_event)
                      db.session.commit()
                  return jsonify(message="Events added successfully")
              return jsonify(message="Invalid request")

          if __name__ == "__main__":
              db.create_all()
              app.run(host='0.0.0.0', port=5000)

    - name: Create systemd service for Flask app
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Gunicorn instance to serve Flask app
          After=network.target

          [Service]
          User={{ ansible_user }}
          Group=www-data
          WorkingDirectory=/opt/flask_app
          Environment="PATH=/opt/flask_app/venv/bin"
          ExecStart=/opt/flask_app/venv/bin/gunicorn --workers 3 --bind unix:flask_app.sock -m 007 app:app

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply changes
      command: systemctl daemon-reload

    - name: Enable and start Flask app service
      systemd:
        name: flask_app
        state: started
        enabled: yes

    - name: Open port 5000 on the firewall
      ufw:
        rule: allow
        port: 5000
        proto: tcp
        comment: "Allow Flask web server traffic on port 5000"

    - name: Ensure SQLite database and table exist
      command: sqlite3 /opt/flask_app/timetable.db "CREATE TABLE IF NOT EXISTS event (id INTEGER PRIMARY KEY, hour TEXT, day TEXT, description TEXT);"

    - name: Check Flask app service status
      shell: systemctl status flask_app
      register: service_status
      ignore_errors: yes

    - name: Debug service status
      debug:
        msg: "{{ service_status.stdout }}"

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Remove default Nginx site configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Create Nginx configuration for Flask app
      copy:
        dest: /etc/nginx/sites-available/flask_app
        content: |
          server {
              listen 80;
              server_name ledominh.thong;

              location / {
                  proxy_pass http://unix:/opt/flask_app/flask_app.sock;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Enable Nginx site configuration
      file:
        src: /etc/nginx/sites-available/flask_app
        dest: /etc/nginx/sites-enabled/flask_app
        state: link

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      ignore_errors: yes

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded
      when: nginx_test.rc == 0
