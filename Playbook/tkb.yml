---
- name: Tạo và phục vụ tệp HTML lịch trình với tính năng thêm sự kiện từ file txt
  hosts: controller
  become: yes
  vars: 
    ansible_user: candi
    file_path: /opt/flask_app/events.txt  # Đường dẫn đến file chứa dữ liệu

  tasks:
    - name: Đảm bảo Python và các gói cần thiết được cài đặt
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-venv
        - python3-pip
        - sqlite3

    - name: Tạo thư mục ứng dụng Flask
      file:
        path: /opt/flask_app
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Tạo môi trường ảo
      command: python3 -m venv /opt/flask_app/venv
      args:
        creates: /opt/flask_app/venv

    - name: Cài đặt Flask và các thư viện cần thiết trong môi trường ảo
      command: /opt/flask_app/venv/bin/pip install Flask flask_sqlalchemy gunicorn
      args:
        creates: /opt/flask_app/venv/bin/pip

    - name: Tạo tệp ứng dụng Flask
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask, render_template_string, request, jsonify
          from flask_sqlalchemy import SQLAlchemy
          import os

          app = Flask(__name__)
          app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///timetable.db'
          db = SQLAlchemy(app)

          class Event(db.Model):
              id = db.Column(db.Integer, primary_key=True)
              period = db.Column(db.String(10), nullable=False)
              day = db.Column(db.String(10), nullable=False)
              description = db.Column(db.String(200), nullable=True)

          @app.route('/')
          def home():
              template = '''
              <!doctype html>
              <html>
              <head>
                  <title>Timetable</title>
                  <style>
                      table {
                          width: 100%;
                          border-collapse: collapse;
                      }
                      table, th, td {
                          border: 1px solid black;
                      }
                      th, td {
                          padding: 10px;
                          text-align: center;
                      }
                      th {
                          background-color: #f2f2f2;
                      }
                      .editable {
                          cursor: pointer;
                      }
                  </style>
              </head>
              <body>
                  <h1>Timetable</h1>
                  <table>
                      <tr>
                          <th>Tiết học</th>
                          <th>Thứ Hai</th>
                          <th>Thứ Ba</th>
                          <th>Thứ Tư</th>
                          <th>Thứ Năm</th>
                          <th>Thứ Sáu</th>
                          <th>Thứ Bảy</th>
                          <th>Chủ Nhật</th>
                          <th>Thời gian</th>
                      </tr>
                      {% for period in range(1, 13) %}
                      <tr>
                          <td>{{ period }}</td>
                          {% for day in range(0, 7) %}
                          <td class="editable" onclick="makeEditable(this)"></td>
                          {% endfor %}
                          <td>{{ '%02d:00 - %02d:00' % (5 + period, 6 + period) }}</td>
                      </tr>
                      {% endfor %}
                  </table>
                  <button onclick="saveData()">Lưu Thay Đổi</button>
                  <script>
                      function makeEditable(cell) {
                          cell.contentEditable = true;
                          cell.focus();
                      }

                      function saveData() {
                          const table = document.querySelector('table');
                          const rows = table.querySelectorAll('tr');
                          const data = {};

                          rows.forEach((row, rowIndex) => {
                              const cells = row.querySelectorAll('td');
                              cells.forEach((cell, cellIndex) => {
                                  if (cell.contentEditable === "true") {
                                      const period = rowIndex + 1;
                                      const day = cellIndex;
                                      const value = cell.innerText;
                                      data[`entry_${period}_${day}`] = value;
                                  }
                              });
                          });

                          fetch('/submit_event', {
                              method: 'POST',
                              headers: {
                                  'Content-Type': 'application/json'
                              },
                              body: JSON.stringify(data)
                          }).then(response => response.json())
                            .then(result => alert(result.message));
                      }
                  </script>
              </body>
              </html>
              '''
              return render_template_string(template)

          @app.route('/submit_event', methods=['POST'])
          def submit_event():
              if request.is_json:
                  data = request.get_json()
                  for key, value in data.items():
                      period, day = key.split('_')[1:3]
                      day_name = ['Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy', 'Chủ Nhật'][int(day)]
                      new_event = Event(period=period, day=day_name, description=value)
                      db.session.add(new_event)
                      db.session.commit()
                  return jsonify(message="Sự kiện đã được thêm thành công")
              return jsonify(message="Yêu cầu không hợp lệ")

          if __name__ == "__main__":
              db.create_all()
              app.run(host='0.0.0.0', port=5000)

    - name: Tạo dịch vụ systemd cho ứng dụng Flask
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Gunicorn instance to serve Flask app
          After=network.target

          [Service]
          User={{ ansible_user }}
          Group=www-data
          WorkingDirectory=/opt/flask_app
          Environment="PATH=/opt/flask_app/venv/bin"
          ExecStart=/opt/flask_app/venv/bin/gunicorn --workers 3 --bind unix:flask_app.sock -m 007 app:app

          [Install]
          WantedBy=multi-user.target

    - name: Tải lại systemd để áp dụng thay đổi
      command: systemctl daemon-reload

    - name: Kích hoạt và khởi động dịch vụ ứng dụng Flask
      systemd:
        name: flask_app
        state: started
        enabled: yes

    - name: Mở cổng 5000 trên tường lửa
      ufw:
        rule: allow
        port: 5000
        proto: tcp
        comment: "Cho phép lưu lượng web Flask trên cổng 5000"

    - name: Đảm bảo cơ sở dữ liệu SQLite và bảng tồn tại
      command: sqlite3 /opt/flask_app/timetable.db "CREATE TABLE IF NOT EXISTS event (id INTEGER PRIMARY KEY, period TEXT, day TEXT, description TEXT);"

    - name: Tạo nội dung mẫu cho file events.txt
      copy:
        dest: "{{ file_path }}"
        content: |
          Toán - 1 - 0
          Lý - 2 - 1
          Hóa - 3 - 2
          Sinh - 4 - 3
          Văn - 5 - 4
          Sử - 6 - 5
          Địa - 7 - 6
          Anh - 8 - 0
          Thể dục - 9 - 1
          Tin học - 10 - 2
          Nghệ thuật - 11 - 3
          Âm nhạc - 12 - 4

    - name: Đọc nội dung từ file txt và cập nhật vào cơ sở dữ liệu
      command: |
        python3 /opt/flask_app/update_events.py --file {{ file_path }}

    - name: Kiểm tra trạng thái dịch vụ Flask
      shell: systemctl status flask_app
      register: service_status
      ignore_errors: yes

    - name: Gỡ lỗi trạng thái dịch vụ
      debug:
        msg: "{{ service_status.stdout }}"
