---
- name: Deploy Flask Web Server
  hosts: controller
  become: yes
  tasks:

    - name: Ensure Python3 and venv are installed
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-venv
        - python3-pip

    - name: Create Flask app directory
      file:
        path: /opt/flask_app
        state: directory
        owner: candi
        group: candi
        mode: '0755'

    - name: Create virtual environment
      command: python3 -m venv /opt/flask_app/venv
      args:
        creates: /opt/flask_app/venv

    - name: Install Flask in virtual environment
      command: /opt/flask_app/venv/bin/pip install Flask

    - name: Create the Flask app file
      copy:
        dest: /opt/flask_app/app.py
        content: |
          from flask import Flask
          app = Flask(__name__)

          @app.route('/')
          def home():
              return "Anh đang thử cái web, em coi có lên khum?!"

          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=5000)

    - name: Create systemd service for Flask app
      copy:
        dest: /etc/systemd/system/flask_app.service
        content: |
          [Unit]
          Description=Flask App
          After=network.target

          [Service]
          User=candi
          WorkingDirectory=/opt/flask_app
          ExecStart=/opt/flask_app/venv/bin/python /opt/flask_app/app.py
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to apply changes
      command: systemctl daemon-reload

    - name: Enable and start Flask app service
      systemd:
        name: flask_app
        state: started
        enabled: yes

    - name: Open port 5000 on the firewall
      ufw:
        rule: allow
        port: 5000
        proto: tcp
        comment: "Allow Flask web server traffic on port 5000"

    - name: Check Flask app service status
      shell: systemctl status flask_app
      register: service_status
      ignore_errors: yes

    - name: Debug service status
      debug:
        msg: "{{ service_status.stdout }}"

